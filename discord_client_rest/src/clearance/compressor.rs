use lz_str::IntoWideIter;

pub struct Compressor {
    key: Vec<u8>,
}

impl Compressor {
    pub fn new(key: Vec<u8>) -> Self {
        Self { key }
    }

    pub fn compress(&self, input: &str) -> String {
        let data: Vec<u16> = input.into_wide_iter().collect();
        let compressed = lz_str::compress_internal(&data, 6, |k| self.key[k as usize] as u16);

        String::from_utf16(&compressed).expect("compression failed")
    }

    #[allow(dead_code)]
    pub fn decompress(&self, input: &str) -> String {
        let compressed: Option<Vec<u16>> = input
            .encode_utf16()
            .flat_map(|c| {
                self.key
                    .iter()
                    .position(|k| u8::try_from(c) == Ok(*k))
                    .map(|n| u16::try_from(n).ok())
            })
            .collect();

        let decompressed = lz_str::decompress_internal(compressed.unwrap().into_wide_iter(), 6)
            .expect("decompression failed");
        String::from_utf16(&decompressed).expect("utf16 string decompression failed")
    }
}

#[cfg(test)]
mod tests_compressor {
    use super::*;

    #[test]
    fn test_decompress() {
        let data = "pVtZgXOagltgGv5OiOfn2ZX+nFmn7e7QQXaOPhnCW+KWjtnSC4R5WlO$nGit-AVVnFzQncnQ+QtOnNQOw58ZzlVdYTZCWEVmFr$fvpnXDOEn2tnvoQXRnZ9GiVSncZXiDZOVFNnHWVGfhnzEiCnOBLnOFovZoOnnKhCVC5fJKOgm2RxQ4-mDftWAnqQOjnd5ncQ5lXSBThgZotWE$qgQnGU4SjEOkDJnqRe5oZ-WekQnEteM-5l6UZvRxQG5muiogtkSeDsF7PAieDPsz5BganXGDIABMnJp2tDnmcN5E4a$al9$3+N-HDYLpur2tazgAeZO+RVZng56ik+ZCePFCemnOGVG3Uw5srGmZHgZXrAzK6aYZA6uA9FAp6AnFj7Lk8o7StDQkCnHZ+7K1luFJp91RFM75M+EGEnngGdERNl2jdoncJGAeUUqFnMvXvgHw67+ftVWdHQZna6ea5LuuE5XFahFtnC49$Axg4SU49wxLqxkGX8mHMgkDQOcgvt-Z+nfiVQtgifa$gG6Q4tQFXSdpNZ+khjF4Lm7o9fI9uwWwfZMijK5LndcRGFFbFuAEoLHfWRYbCDq1ddAWvgOVlaH$Ri99JGRxCXZnBK-X-l7CVLwt+FQ$CBVdmHNuWe2Ye90WpEL50HB8aOOxeM7orooM7xGFm7rxKzQgXG2gGdsn+9xAORXFQQzopJ03t2WXneO1CxmOotl9$1egiXn4vtjVJmjSFqJ0unfVScQHOGcoc799cOnRgJSVaFS5mHgJXIpjWpOJ2EwxqCZpn2dJln45VzQiuWJ7VOZNXaLlzDcot4QDX+hOAsZxFapj7nnCszzQ8vNX9+nuXQIneltaXlEJKO4nqVVXRmlXqvVIXFsZLv42qtne5QDzpcqLvDsZGz2Z+dgcl3XX4TELEtOjfXq-lpntFV2ICovaOFadenWhCIONh9nOkNntjcJmi6W$OJp6$EvCZ5mikVUQeEJlgiDZPDR-ZDZWFZ+gU71vXErF3$EAQ3LCoV4V+MZKOE6+pXSBvXnRF5geRNJIXAQRLCdEtz-5LnePi6DESGppLutv9tWG2JfxAltYZtcq$n4gJngUiHsadzFuvV4VGnnu6VXgTEJGI2mQxWIE4rvN5ve7aFZuVtoHCpQ48ezEZZYZvhl$EIGr3SDC+o6JnGQ$wQnRZRwJWXGwEG2Z9HDn6dgUv+fZjcq6zZGZShAxjdwtgQMQlzQ9ntC9PZ2xl76JFjtgZwGaJhvVaZS-5Ign32WYrC+qgC-Z2VWv2Xeu5tjzmAporfnRGV+5QeKoIMOzETgXXo4Mxma-rvn-QQonWCVPSSpGSpV2Cu6NVVCm45+HUe7nxZKLQ0YHQVzzX-nLZDnQ36ctffEBHBJNxD2gPD2sfm373g9nirXB3W9OBwg9JSY9W3TFWVjvtFES3fkPTgAvtAQS-nDZ7WVJu4X1ShxBGLup7dfNcXjkWt22$OKGDbaPCHJmoxJVVR5-JC+jWxHJFYo0i6Yc0OVpUuIJ$f7pltG++nScaj0hxrfeQ6DtoQBDMWBRNc-u5QoF1Sng7XnfIsJ$2$RQo8NuWxdA--i+OMn7CbF5xtfRC35Hx9-jJOOCFKiwSPHD1rEOoxkvMsol42xhK4j+lFJamtKJnTjcbl4RgXX4jTGmDZXmLRUY-nOYHFG2HGwYCNHWUmOPTuQt17Xs2Ofah0lD4SqvLgJ5LjDWut3xgt$EvDQRUmxXKmQXUPQ8kuOGBRxEUmf2HvvrpN+uBSbVcaRHjnIX9z8Ua5V6QNOmOOgWNOHbanWOqEe65RQIWIxchPS$HNRJHnwQ8SGKeHJqntXAAdTJEHH+xXe5Wg++rkuP-kg3s+NOuXax7UWt78Q9Zg+kBDfDMEb$U5aOB2tTBl6jpkDZ5i0VZSTCacHxDfz0tDFXw5o9epdS6jkcWADEAj6H5VwWdD-7w6P5iHXUS6+XD4nRXJVeXW9XlPJRR2wwE9MAQOuWt1unvk3WvmQxUTB0IwZQjtm7-H2OYUAOQ7NaaSOFgo$lEtIOQ-UggCZNWzpl9xga5Vxl6SiIbESZA3mO49zx$Gg5MZc8sSz5Sx3Xi-raL3ePYQ7ZcoESencATGXeRE6HJ26aiSzoXz5MGdopJ6JNgEuth0xwUxuX1OD-9GQJZWbULV57IXe6JjiuGCZxu1SVnziVDCeH7M1MEUkUScqdMe-3HPR9qHeVXOaobgjXP1MoD7rJ-lePuZNnDF+AscPeaELfwuGSUwukvjtXxDhLHJsQKiSJ2Jvc65ZPz6Qvb1aNxXvOkGZDap5SF3Dv7$ZXmEHlkY7VdkANXlo3OkfLsBprM3eH9ud9xp$QIs2$$Zkw7X3Sq6kxEQ5UmRCu99Sw44QdkmPDjGGcmNxsTUzAQOjsrkWNnTj-lrBHJg6iX9-GdE7YmD$6A+aL2tsluOreh7QLZYMeDaHPxVuZwgBLUk4gUZZZauMzA4En8dSaqo$WSa43PIIIENC4Dk9uHzBUZquOQU866JhsWZ4W7eWFACZsZbdwrrDTlTrPEmmQ2Q7gGN4nDUBTaX51PrXE08cFCgh6tJDEB1-ocCq1AOw7H-j+Ix72kAQhAd5gJ6zj7pv20Pl9QXi4e5SLo6rKRw6r1m0WrMJnn2exaS0Zdkvn2SPMHhoNxIx+gVcDWHXnH3YrJJ8HnbwzLAK0NJjulnBijYRKo+n9wpttYR8qtHsIX$5NZWwMu-Mds0ru-J5F$s9cbd$vQuf0biHliusGucenKP+sEG6PuUA7XFlQo6m26H+FUxLsvk6lOUME5US6rdSUccOMW6VpJTs6bb9QgJpnNHnZSnRDC+m0IkKrl$HP1iLFnmxkJ4jSsAHepjYbIvveSVZp1NF+Prk2FQWxab0bfzVK6YWB8xpSZp-rrxMJKr8s+Ou5klAWCQMplupfpGZ3YBDRSg9a+HH08NLvoqaSb+CP2K4da+dIkAMlkkC7sNAg6eDct3Dam1HA-+IYpQVkJ8fsrLQDQEtXhQt3MLLG077b0HsWtcbM-cJgnziSWgPQc6XQ6hA5XcHk++$CZfiEL0xJcQ+xBReU34jMQfg9ritJcEGsJZ7WeGQnnoKdfjOpvnLpcNiS8rb4dLh2m6eXKH+cV5zkTDSUWdz0iW57-lGk6SzNo9p8EfUczU2So3D1DLCmigx6UitXQeV1IbEDjSDlws$XgH54qNHIKvUkNhkvGQ8cs5m4z0MEIQwnvSUUGLvexUE$bcWJA3vanJRKRlzvkVdN59PeClR+ahSWgaAPzkSqCwA6wt6f-kVFk9ZXsciJ6YPQc02sGUf6EzmXak9dAta+Q18Rz4TNKeTeV+XaQUxjqe0365f8ja6dEkOd4x3sUvwTXm++ckdgjLp1lrsiwKWY+6ev286UYfeZT62k3lPljL6D$21nP3nMWP6jUh85k76OEl7bOI+e+oJqLVOYeIE$P7JZtnjnST+FHVvl+0ihP$JpxdiAfQpp7ofQhrEHQTEnt$KJcLCBxzHnjt2BRXWLiRm8E$igQgLDcuRz7GjgxVizU4OG-DcZhMixLILDhxEDjzwfHhWDR2RT7cQrKXWaPVcCoMRShD2MxQnsHSoRjsEUZHHntIHY+IxZClPxHnp-E$P-U7i55$Huz5hCndWAjleLHVp-HmKApVFnW5oKQz6Y+rCXUeZbxNWZ+$WQ2Q5YUAm$+YxYHV5tj$iTLWSDO$PhzFfQj0xCPutZ7n+$+jPVtZiwuQf72ZiwZQeAxX2QtZWa2QoDKupnoD+c+$eDiApVoDewikoGWcPool2Ajlj8672koGKGK0CgHncVJfHVjGoF2VexKbpVvCJCE$WSiSh2HnpSettsWU6LPVtzKKiESL-h+WJ7gWien-SrPn25WWt$f5fFjcodKKfAPYKHL6E42HxaeP$KW4P5pVj4JU+dE$JXW8E$+XixwlvYeueeX2PnpeK1WRmN2QpOpN+NPu$REOjoW1+meOPVp7+O+EP4jZjk+$PNZl+xE$+lflfcWF+beo5ShiKvLPuFeF2cKot$Kjtlc9cUfwKNcPSqo$Rb2QhjtGoiW32cPifLf3c$fqpuukcvhIueQDfQ5JcdK-CU2H7dJN+VcJ2O5kfd5EtePmtct$KH5OP651cEJEflSz6n2EtE+ojptppHhPhmKa2EWR2-KDov53pCnLew-jhZUL6QckgZcQu85xZ7-r6mZgcmz8hsUVugKKfzJm5c2zKGXzidpzhz22xchtwvxFvOwXzBj$CbFUEuXfoMf85SLWiAZogfQ4R8mF7tOu622vzc2gOune$W61mFETOuSIw5LvvGglKGCZnn-9NfFDdnIE76dtOR2SXnDEdvRJVmzvanKDGZqnXOs6+EomR+mj1vppqJ6gjH+eSORCUmUmSVv4ER3OSjqq3qpGu8mVonqntS43unJHevvaCVs9I9A9-e+GvR$nqjNZ6fYvI8nXhf$eMmRr08TxQ9hecSqHtqDGZeG26JZ2zzmt3JuO+3B3+Qem2m8t7ndZtD6tln+qvJXodjSpd7VnGHDxlQLtfDEDWauZvBqJpRHt54QOu7Co13+6ijqPuOkqhVTaE9dogOpvk5$xg6OzUo64k6$nISASLJumLnjn-ZrqLOZp56I5VPveJ4ZuAqvOimuV$Bnq16zGjOk4v7mCeXFDwDPjb5-ZjG9rhOjRmREOjgMQv96q4adZrRgWlnnO-sbsbCJOtRNvWPpqaUBOQtJguVqCncTTotJjaB$FomnhekbpnXuZ-jnouZoFZqavofuNu+nRmTZquWokbjxENXUOxqxOeDXHQQpXhUe+oCeFk9XEQLuVZv87uQdG73DS7GgxupkNXblQ4fvFZH2Rmtlau6RPu2owuSnH2vwhoroblw7UlVip7KJLDF3T1CeM0qnE17ecDaevomWgW07US2paea$auFqqa7FR7XFh1hbauoQtHUScDjtTrOzjXCL7anDcBBb+nEbIbml3oIbxuQFmnHFOTl7KnRFMwhd5bdn7FbF64qJcG7JLDFZo+ODooK4mTGHoDG75QB7eoia9oks5wfDTFmdCFYl7coQj7xL2Dx6Na7K5D5FXPT1seOQUSRgxeAeFFBjOVUbUB7cql74uASnHFqJ2NQpgOHSSn5JRbG7GivwvntJpJGgNo48FZHO7Gk7v4-U+oeo07Gi01gtEpaiwZvwxj-eEtliKnHFxDBJEiSnscpizFDDpibJjaQNa4diwZcGQtGWLi6eXUlwRcYiuUGcfDlX5cApowccuROcwcJtgaHcwZlwgcbcwZj76nUcrnXRHCxcKnTcbwGdWdSnQdVWQ4Pel5tvLcKnhwINpn-c4cwZvdft7d9dSnOUWQc4AwTUhc3ZlwFZTm2DnUUOawGgoNdbXNKtLZpJXUBb1ojxE7BU1dOWTw2jcbUikDqFti2iZ1ZYOiNVh7YoG82Dvat11VooUrFt2iu1rIl1J6l5FZpbob2MGictTu0nBZHNf2XlBZ5DRQxXKnHbeKN73U7NEk-tcFSMgFMFmO30pn7JnJHDUdCZvXiL7cH27eYmHk2jUFSnnUj7RO2UCJE8E7EwmQgkIbAmumrDgRawHkvtFZnQnDLDnJqUiunEEoZQ5JXwvwpo5jgmDEfnxUK8QE7cQEuwRi3cXoT1nQCJLDTmxUlt3xqEPE1ZRMGQEl4FrncGjcLLLnvEKDLErMn+PokwJdaaCezm$EYEb+fuE+KDB5Z+BjRZ2xj4kFDmPeE1FQRjpns+IITw-+f4uUVmJjVjfdckmmujZqT+Sm$1GZjbKnaZpdaucjIdLdTdQNaClzOgOWp9lxU+0wRusjMpHQ-dg3hzX9MjuugjwMa9zjJUnDOOcxRmJUaCLDRYGOloHc+w3w$N97L9dGvI-+5beK5mK9ZJq--+UST4-rXbHpUqImdiCS8q3ifZRqK9Aio+CZqU3FG7FlukxthqrE4iOm$9rE1dJb736wC87U8AwoE3zTGZj7cUQcr9AqKD2bCZXUBqKmWxHe73VqVPL3K9rlM3u4e3P3rnH9I9Y3Zcw3Y3YiNqRkak73AVj346HnOv0wcBn3KkL5Vi2opoxosoLo5PLnX6Yp5Q1WoitifDsNd6k9COcnaO7O-NQ9IuEQC9Mrjvd41qwWPuscON86$oRHb-LIoHeat7D9h486wt-Z5JhzCkMblt+vvHbzplwZ2oHHrUcWnD5QEtnPbt+kUkq646iVH0GiEULiTiQc7KjO0mQ0hJaaHeaejOuEio7cjODcIikoJJpkOTxko5jthZ-GiS29R7Rp8kllscLj-Gmp4pwYnjt+fFrpzkgpdYBiApzkNZnJHEWp04RZT7BjZrAHw7jvwH8Z-+ojZjSjnbpDl9Sesb1r+r3jWpPqdrIJxl1dQJnBznTr$JcpxJlZdrV7ei6KQJciG+YfcrdiRH3NFw1BwoHBdbNP8BKnUixB8hsB3A8i6BJ8zBrnlWpmfZaeTBrnXbZlxtEBw3qBwoN8eka868+vm1SZjrSmi80htiT1U8+1R1ei-rYBdiCgJg48JJCoWA6nNoUg8ZcbqUIt2xNWR9kiSpYBSo$j1HtgSo1wpmM3ucEH9h-q4wRoxKaNmV+vIgbUDeJqEQLBmzdkoFzz2DqlpzKmKkUkFN6wo+oQjnaUaNDe$z$X1WFNWx3LQoNz9dRxSZlztEdZGZ56Wx6uxZUBVig9+aEtHvVZvz$x4HENs3IbZ38d7JUbxzAe4UzG8g6pPa2onfXcjvwYqkV7Y$lUIZxpKmevL7HxDiaN$6a3aKBEhl4UebpiaAD2Pinb5fzoaCc4PnZDO2+P32P2wCIcaev24C2rukQfm2Y2ZlaNJMMUEnB2K2diNmO-HjGnSMeMwoXEWBdM9iJMdiXMi88AfDgMWPbjXMwUdU0MSuRw6MbUm2Mz4MWs$2uUzinM4C2lGQTM+QTMIfJjTMm2uM6w7FxsevAs4CgtN1cnaCvelNsMksm2V3dmYdGUl57FgtokNMKjckjauM9I6MtnYuBj-20JQtcs$IMIuIftTPPI1E4I4CgwiUSZcsu-Mw1Me8ZDeeXMPmfUT6HMAACo9-4ah1j-9MuMK4DZaaGIk+aKh-6IA-AXHnxncsu$8ncp-2bOuQXMD$VQt7l89$SIS$A-Y6V91Wj$uM18r4jnXvIsA-JFioT$DJnJEa23+ntlXLD7esfIfzm2ZRRPPML484XLWPzGZNnf3ZHZUM9L1MZRTIrngLPZXLKQOQEvWLWJcWv$AcvnL$iKbWGZXQ56uLPK+$iKm$JoUK4CHb5EljOV-PXLPwfxAhrbxZaC7h1aOVUhfZlJ5h9ua5XLAGqJ4f4uph1dlj5K0LwKDKr-ZRn6RpnKvDFNIhdQ-iaKDCzUiKdaLVYdq-6tXL31uMhKJYYsZRq1k1MrSZHYAcGZqYrJXLSh32XM+DgNXoA-uM+12ZUT4XBZXM$Y6DhYVZah6fA-J4ZjL-MTk9QkgYf5r-8o+7XMS0zktM3Jcs40blFsDY-2w0uZ2s3L4CE0eIf1OnFIdqNIItNM+0w-k-ScihVk69Dnn01n0+nCRnlNHhtnLrWTIQXbNXLE0M+UDIngCAWW5vFvm1+XttObnuZX2xVOqj+l7nenxXw1jDgoDXn70wT+nFF+p1$TLnqQjD-SXVOkOCE9TLCDupekrgg09s-oDiWekew-ZTQJToAAjGLnDQR9XdITRLFLQvwXLvMIXXiu4Z0oX2x5QXXXuSxqjzCPsGXa2GFZi8vDcLgpAZwMshgZ4PJObgTFYITAvtnNXeXgOPZ3jMGhAFpVqOzNjJaGjtqUgher6v421K5CeXtA6ZV$zJgjGABWFEJQ8SuWu-5rinoZKnMCtC7AQ31kK7K2C5mzXObiXZwimZWAOrqbiuQncgt2evrq1CffLtlW-e-bpSGxnqQEZeJsCnaFtotDnILDbEgFmfQucoW5XZjR-eIQmDT1XlCeERobQzOzWceFWAQnSQ$DEpRlu2q2OFgaizCoUv8gomn-7gtlfPsRRPl7JI8SXu$zqO8UuJMCgx-GXxgCmFgTd9metO3VOmUtCrM7C4OCO5czhNVU5CN-6g8OjJPDgmxJX26TS+ALmktZQnA+wlMCjvuXfCeQzNnu3XJRMHVO1ahG9RnlzVCrf1OmnpM7CUBSmFdtXnHBBHu$n$oVnVGAvjno7cLXqpiVdQG5AdgZMi+tEaua5nSnMl76lVTRa3Spgt3v3iEhuxscDJ1xau9lYtfSGSgfsBHFGhtSZ-eoFZupYn+$tRsSF6FuuSZDZQttkjj-ou-iQWjQTKfCCAaEEiD+t2kh0uFzODuQRO9jCRZlu6lUD4WQZCr-mEWEBDfsplOBtSSfEMDM-Skt3vFuCn4XHnnGOXDizhEQWn57Z-hVfRBmtG6WL2euD+zTE8DAvoPn6umu-lJOO5xohpGSuoGqJCVgwjR3kaa+CZNrZzuEq3p+RZcveCdQlOMXtFLncDhAxrOvuQnHY-6OpRgz+Xhw-AOv$wjDOrznX-G6WYio3+26GFiQQ6mnP-vCO++hnX1DZOaIWBJmAnA6SRCPojReUGYsbui2oXoOjJY42vdaKq9mEglBDcGpG-IDWO-E9V01pNcrFUS3Utnc4E-O9xf+NNGZk47N5Rmf4Z7buq4l+vT+2mgCGZPVsjKjM0uqtF2nc-1o0--uMEErjaQvnDOSA9cdnomms6GmsBmeq5lmm-OpvSJw572Qo6$CzqHPujHnepwxOq+EraXM6jUF4hj9W7rnpJ$SZQP0qsArmhnctHEhYzAxgiY$TmY0gG$j5rimxGHCD+V6pQ1jTsNzAjo4vsrq+KCrXsJwSSAR3j+gtu79c7lox3EvDJ2A9pV$lxgmhn-4QQCRZrzPjG2neHjpWStObnW7Ou9j2V7i7$jUCuap8QtGnrxk8ax7TTX4$iZUcOgQosJzBDCp44gDQjOZpSSmxZXcSKxZbhWSZnXF9X5QFTShxwEUFFnHEkZUwlhurk8Dq4Fs-1v9H7AwACz$65-uv7mtCCFZvrxBb9RddlnXnSt++eVOdU0SqDCG-6mGvdU34XaCuKlDlG4jRZKZaw2qGZOO9dgTXR$ErQg7QWzbE1v0ChvqP39lnEla0O7$St+XPXvllw68bLukGX6EurPZEZx7z976qQYMg+lsVRnSVAbHDndSkRAbgvE1vGS43vnuZ6Z2aQvffjR+qD0xFEkOtFwfEbiL7E4RRvwZcX09gJHbYrHav2RAbAWGLrLZWote-ZK22xwzpoZ+ORNCWil2FKdMz7tqgJTdu9-CMCfnj0$aZjZCs2j+zGv5+ah3+DXYuHDCAF6XJXozYmpbnPpwTMW3wAOwqsZb95fjBtGnZq8-GrkDWVwDvjqYQXq$BggXxZhdE0Cn222wnWWqqjssmrCpFbeemop5Q0dxxP$XHpqkzU8MI7e7wepwUuq8MMoP6OztwdgoiQI5QXUBjJfAK+mI50jkJYqmHpt-$zr6wfTFoR1Z7Mp6SxBgqb7acUtFH6FerqE$B5qKKg6iGMq0XpwnLfg$+eWmHAMboPSz6BOqqRtZEvsccG6flE1a3wHMoCsRR73LMRvufer67O-WAWJcReX4oaJPGba+4s25ZGQzU3SgGIrVCUI8ewlaeEdEMpswFJFZS4+QhK+$wt4q37n2Jvs2Xwxf+JoHXdsZv6SH8U31hcbvs2nmzDg33XptnTc8krf7D2a9cHMp83UeMJcJkisD+E7hfF4mYxcxDWsehfZQMarlmh7r6MH03vRQOQpgJIAOc3dg7dlDJd9$BM3RXIohRg0wreznShlNsnYbXrehFGUocHMjw7+nMqrPcqoj-JH-+KR1X+QFkchzV25CC4rOTKLJRW2K3YQaOHMuK6lem+70Hds2voePrcvVGqKwZDNnd6p3kAMUTGorwfz+v+Z4ExCZTorfMn0nqmqsz3qkttVPLvf$U56zRGHvMCpEG1cRLmJnjrWXaFqjTgwE8vYehEQvgCnROIjLmEhzOQSwVnn1fQl+RuiaLTtMCLXMuj--aLUoBGlD9nXi2TqW2bcJ7JDrnMYGLQDlf-cgCuJuRCfzGvPgu-CD19bgYkSpvz9gRIkeHDGg$XUjML8q0PsFQG1kHWvAGjfzGrzBDF8Fu9tr6m8-gGBpCV6rtKDklE9Qa2ZGr2hCpnU9cPLuzwERXEZoP$B2FOD+Ltx5X1wjwsFjxW1VZjv9ZdXzqJlnXePTm3iHq8W5eI1HlXMjUL9j-VunQirpvomKEEUBQB06cwUH9OOV2GkgALgC+2EJcTBxOFYfLCiZUc0Bv3UzUULhovwKPFGXGC4nM+QtAn03LT+QXD71bRZCJFXYNHQM$1NZDxujPJg02$1AoSJ50iUHQkrU2XT3lsJELXajGdousjuY5XXP0V0eVTYukEUQkLQwQv-u7YSDjjZDbuT3qMR7grftVMozEl0mCzcnsUSMCngeDqmtAmHKCU9pfjxC4Jt9VWLnpRAbnnAYn-AXUzauBV4Jx4Tng3Xi5l$WAW98D7Nv+OrsufelaVBHtKvA6lMrR8ew721fHLvJzSqG1z$9EHSzRvnvsB7r8EBHZxWSi0xNvn6+MFM0DL7CZnB5vUOM+V+nCUYcLGOhACjnlbj2appGv9GDUkmp2ao8VSnrHW7xABBjNqoC1+AkMp7bx8GSOtVIXD$kBebgAoQ3W57eaVXKG4JpQzqgE91HrkoamDr5V8Mfnonx5Nlx79AAsXIRx5rG-lZBEk-MsIvEP9QO4RtuIUL4EPglkBNHm4QM8YHFDnDCOZR-+XVdXbucTcr6HMMFc---BRqL1EOqOHObrzuOPPIktdPHAGOCk9hLsM8PFDvNjcCQuKMLPZCa871AuxhMdRZkRCR1d0La9AoXbW8TbpZvBMJpGFPMO4UTLuBZC8DlgTOYrREJ8PKbKExj-wqtlZpLlfg7mnBX9gl4oWae-m9WuKB3SXbDEmtFQKTktNauxZcmkILWspGuTLdA+r7MxQMPLMF-ndrnqdQfUZFA8HiDtlWlEpBo6tXdAMRA5oGxFwxqZ-LRSp+pwnLmwIXJ2ol5ndVJ3QdAewOH7P4wMoNVOWWR+7D-elxQRCe6PPuVXb0ox1eS2OQ+pFDUfEFMG7clXZK2TaEcgSKdltC-RkbF3YlSIXKpzo0o5vkc$NsO3QFgiF3DuHX5v+2VCBHddCWlmV6R7rfLoruZEfWrUlnj7QFePrJCaswe5xcYhOcB8uwCI3oD2VR4+AQBGga9sz4-1zSnrhOHQ19wokkebYn7a-QiML2mlP8lfMLOZRzMjRPhjChzJXRmtr+r1v5d$Zg49UjY92GmVobZwGQG9rMkvCa3wOvMBbcZumQ2c2dwX2unh-hUAqp7qKQv+2G+7QQwU6W+zjKoU2u3ZkHLszjnSAEoZXElfzk3MSXvH8k8GSpq+2idOzxUQgTHq+9SWoO-XOKqnQPOiIa$BMZsbB$ruRiaT9fPk678loPvXFAktXGID7bMQNXHR1PGIuBWj2kqSuJ2vstV5oT7hlgDqLl9OqUcIACjngUnrVJXNgDmf9zAbiiM2grY0vNU7qCkbbbHFjZJClo71EejJlAfPMAnWG$n7LRMXWCeIwb0pNcMKQgXrOzO2VQigXR79AI-a2VC2$swrLtnwqB5xZnFZcJtGJB+Skgr4pqKFxF604UaNBDLv3WZNZ27z6D-0uSj2Dh5Xb-r-SbekpVTR6mgbMgiYo6prWOb2cXvlckG8zWHFsoAxP15HRKdPnGoYd7-J0bUdbln4$WmZoar73LKBo9Vgar26L4cZEXhDIM7MQMUFY7Wg8mUIAO$o0LnZFMiPADk6$gXxj-dIFJb8XnGK7IRL-SW6wvAF3OQgfW-JAZT8LUgMF6un9o7KPLUCYAuS4HJRX1wUoECuKnqBG76pd2YYe$pv889$T12MXMLJbxGxkmeUzkaUk+JegS3KHYDY9POvtrib0BkzTWEJwj3lX0BkuB+X5vDf110Tknn5YmSZWGxfMMC-PsIO84XTo9YrnpdPBGO7SrT9vYGS6BGT7AimDrPmpeWnAZlW2lnBnD-9GSOrtX8fJhSFnS6ODZ5TkBob+0jnk9Z03UpubJaPAApdFNDV5T5dggvCnesOfHnF61KIa0B2FCcW-DgWATb6DmLWe-MwQ0a5COrPZubvOWWjqrSmTZwJPg1Rll21QEEw29GwOWbxsCis2mObDOuqw+LvK$DKvWAUwqQvh3VFLt4QlPwsA7MZmIQYntad079ZYxq3m5McSBhrKTHTNni1b7U5hGABN9TkwZ2CqKZ5F2iJ8LnhzfvxpbzRMN4DNsk7SQeuZFEY82SqiOBgF8b7CJ-SaY6c6ezcJ7D4SNnfH-gJPCDuLSGt5iDeG2E3dG1ZmRp-0nrCKmthD0WCpO8FRKmpeP0PNkdZOgs6YJzCEXt9zCXq6rqFbczFvzBcrFZRqFhK+dU3SXXN72X9JG58iViXLlCc5fEXuJ1KYRZFecjREg$wkTB$r$iO9NFG4gkccj$ZXgerTaXVV9FdhZXNROPXmQk$XVnwzkV8gJ1nhOhP2elnD31cBM5bT+GxY4sOALAj9cWCxuQcC4Qn6UrI9cX4QV1ntWZFerBGWNOunCVwm-0VWAAQJlJ3s9QdUCX5hTf-wb5mBWrcOnjDTrzwQeFvJeND2O3poHFDBPXch9OrU05Nx0BRvAVgFOnqCnsZRR4u+3pdWKBLxnQjG-1RHu15pMgm9zR-zTHHxbfn0GLu6MbMblUQL3-lFvmW5tVInWHoBAJnhjfxoXRMo6QK9LQcO+ACWJblRGi$37dQg7-Sw3sxbX8ZlLMHdx3KVBo8BX7Qu7HiHDnoEQrN5fWYrntOW1ZkLkpSYR9sHGDtzHr9KQ1kDWsQOXJwTl-A$a-C61qrGflCmk6$-jfBXAfgEMp$kRl6q3JoCWAuTSRlze3AfgUwSZnt6tlMo65mlOv$opU4uFaftmS6Fd8EAuFsns-5IOH9XQdzdxLDDhjlDQq$hGF6Lc-+Pfg+D1FIUKpqOlDYgNtnIdTvimVCdXUkl8-NzTsTCP3kh98gGcP7CC233NhulYFrGEFFmj06S6WmtnQx+4x4iZP7Dk9Tf29xwhijVGs$-zdQQN5vCOEYt9ucG1vXWXm6oPV2lvAFk6EzRxFV2kvfDgbTC9X5X2eEkzr8EtYOE2itdoTT-YjM$22zu8oEXhrGzUOnVs1KHR+GRnAUqtR3ecn+aRm4Ui2vXfiTEJCAEJ12$kwCa+adp4UgEAw-uWZXi3PXo2X6eV1mad39E6JYqf78ggaSAjPF4upC+DfZX8-ccoWObxVOLzwUqc74le+1BJXwJ3Dz6ZDn4-SUvo3oRbtjrwcMkdU3Ju3vnFVRTvcU1272jeKcB4Y+4iV5itck3BomM4afGzveJ4-lMNU-UaHK72VvVOmmMt4HK3aBrUqB5$2HeUuXBOSuCG4M7bY2HBvfhjU7MUH4k8qntpM4mFe4tk+6BoYqLX5fH0oV6lbOcUNMHHMCfHl7dSpGC0DP4+SKFAN63bgeUVBkqm71nOFpZFEQorHcEkxWY3dizhvbV1LHxwgcGt0CXQGOg+gI7KhrGXZdErxEPfnoBGeMl$zmtnHRf7S2u9R1Mi96bIsCVZH2rxrE$biGKdXM7o6HBHRK8BA6trQsQpieUnMDY9jHxpTtJj+-Q-lwl1YgXPpkTDxF+HxFQXUpzTnmrk+EZwIRbiYr9QPOpCpeJgwkP5nK2nfn7ZjTiP5fFqFzp3tBcsmdvnusnpZAeQPHc6uUZrEfbi8qFrBONsO9Twbr5vYTULjnpeJW8aAOKSzwEe2F02N9G3XnsbfFbeBTOE$L-+19i3A3D1Acxrxm5XsjzNpAxqBM+AQEaYvCJBnon7fB7Z3qngUiIDrr1aZIB4gbUhBprwpFKn8AGOAxpb62HwZ3hQ+Crsw4wFIJtOdlEUWb97Im9$O+$RpzVW9dYMdAKM-8saCHaVEoRcpSHwefDhFT9Cm6Q6I+3dzh-rAIg02fn7OsWXUqgEoInRHcHBwFkHDGvoAZmYgie2U71CMpeco$$1CjOPC7ZK+zEeS-NBGN+GWCxcxp9uUrnOQpKte5Pz5zcnv-ljgI98FutqFu+4eceoKYut0x3cjiiGFAZGOPPV8VzG1jhYS3fI0ug6sK5ZA$gMmDiJpXfCp+jnpUodbGl6HGiSBIFLxn3ZgFgK7P0Dr0Xe+tFHcaBQ-m6FxrGF6xjqk2VGaNrnbsu-S+RugZeeZ0na9wzRcd+QgENQafZG-Nj3SGdEtnGhX-QgIO+hQDBcPD-wj4N6-6a3tJRGl5NW3z--DAcfIsgzF5jXmpTad-frBmKJISbXcN-qHlpablmJ1LrN$ltEIJ0GnqQnZh6AmmWfldtApvkzf9uzo4vzR7AAzKJCxWgekQRFOan++ZX5Ndn8NMzR+PM-5BG7CcXchEbZKAN-P--buKUMG1M+ac--5jRDevOguoOTvHupNv2ZSuuOCo2Xqi56wUWLQmCxZNtC9Ow2OJMCJoX78kmT9MJz7ZopjV1czzEjVCkxZV7X$MdjOFIaPlcp+xZTXOOvvnarCVO5kXo9-Q4QjWGfDGCpZVdHQ+ZWGicBhA2$CNGWe+sc8hqClHlH2R0kNcORAmxp91Q8VEI+dotLLOXsqMFn9ikkHLTUYFnZKja$5SqqhIZxm7VEAlfVIj+vKKOJ2AjfSRwa3zxnqYGJZhfva4RVKcm3pXs3-BR$KeXOVuQRkOzLnsj3K$e57TL444XOACVj6xsEkwwZAJjPQolHOJzlk$cWnd1$jiuj7FvC$neVHc5NUNcWQ1nzqIbrIXQOGYbVEfRN-uIZnCYO4HuQHFZOs-HOVSWqFDj7E2Y4Q9ZXSqaFZiS+RHdt9YB68+L3BoKiLidf0kH2fEc3mLA6RH4EeB+6nXZSMw3vuO+gPs-+97CHWbYj9kd9LAqJaeMoPNifc11MDiAnx6aoYGPb7tPVvXP9UMz7pQCHKoI6vJniu6MPaNd5-fsctgut3tlZCiigRr7-MWC7fArNKrbLBMkH05K2lHrYkguGnze1aO4dESEkGonnPcZjdMZY8EEDMQa79Ocnp1AhpwbPmZRNRRJlovMX2YSze3jsrJFUIcJfU9Zj6o$aVm5kPjso8vNr4rin2AOsoBBOlh+DUxpYcKr6hr1iVf$4EsoQG6n5c3FQgd6NLs1WOcIINwY9KuZpcEn9FESVS6JEBBeb7sZzcMZqc-rsoQEeriKe$07KamGWEiMZCDsks5rYPxrV$ojocTCe3cDGB5IgQXXAOUkXYd4KvnsFshcoVztTKIIbwPaFn0FciVdmZqmW$n8O3WpKIIbFLXdejRChZ2HBVxhSH8v-nGHh4+5NaEf3Y$aNfqORuQ28cRqAg48VRNkOBhRkdIezJn+Q8fJsAABwrMl0F9D304VLj0nLCPkvdnotCLvv9ZU7xZmhanUPWS0tu2En+Zkjwv5gjeDaLUHn1bXe$KadSUG5Qn8OH9dzQtES-2+QhmMzB9dFL4grdOAZl7bNwtEnRpfBF2ZfmGf1F86eulsNoO2cMURpixz50t7HSRJpcgmxYakDTh1ovrwCzITAOcsFujTYpMZXmYPenRRpe$fdmnqQYZwV1u5Z78nqzwu3LFBRggnhAuDo+oVoQLDeNN9ZO-kj7H3FQVPsFtcPCPaC-tSPTn72lzfl-DfHT7LrLbDgWH37eM2ZwBaRvuJtg$32ZnKwCwdvJXZp5okGXsPX-OXKEhRnnn6ouaO-nqDQO56SuzumgGuwEAaPO-XBj9RIQFt5cVJkM+YbkK1j5B8JgAm-nGnNsJnnDOnNGnnpffT4N8UNsiVFpn7ZmZ+BnnjxfTk$unEm6MvI2AZ-JzZlCOo-d1ZjqqinNsWHOLzfTXwe4-Zh8Il7$QCnYqatpXFd8ZnsYpK1s087Xll+QTVhe-1B16QnfTAVDpIiVn18TNTYbthsbFulSHQqYe5cbCEvZgg+NnlweXC6jVgsT1nDZR-JxVN0hTLYOnBI381180NnTWkt-V2XGlS1vQChk-KB3m8leVTXhmnCzV31D03Ybh066z3+0V14TrKD$1cgJnk1PTkK3OhdQGzum$tnnUm2XMTkaZH81OIIqhOO+Q9kE8jngvzEjCCPG5vKHV2rqAuZ9L0FWOoWzuZLsv8X3rUOA4SW935GaR54v9gc0mJUV-Bc$SePBp7S0WlKz38USsXoRVDHAwZvIoAnRRFtcQ9WXULumOei$SarjUMOSELnC3aR5CFx19bDQGnBSvzV6X865tqJBShp0XgFmtnVQORjngnXsZMZieoNGhNLtzErRXVw5pUF5vwtrxmCcQOuOuX2QCclTkCoTw3zHmEXOlj66tUV0gMxwdkYTIZn+nWYt9m6pzS+eXxuZnn+hDuJHAOkJNAZBvAkxAzWGNeTAms8meFDFVmNe-On$jkJ5wxhDD0CtnnOTtnn";
        let compressor = Compressor::new(
            "nOXgCvF-tjo25pchQE7xRHULGqlsaBNTZmuzS6w$D9kMArdYJ+efWPiKV3bI4810y"
                .as_bytes()
                .to_vec(),
        );
        let decomp = compressor.decompress(data);
        println!("Decompressed data: {}", decomp);
    }
}
